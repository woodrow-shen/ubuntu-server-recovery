#!/bin/bash

set -ex

ORIG_ISO=$1

TOP_DIR=$PWD
OUTDIR=$TOP_DIR/outdir
WORKDIR=$PWD/workdir
UBUNTURECOVERY=$WORKDIR/ubuntu-server-recovery
UBUNTU_EDITION=ubuntu-server
UBUNTU_VERSION=bionic
IMG_NAME=$UBUNTU_EDITION-$UBUNTU_VERSION-$(date +"%Y%m%d")

if [ -z $ORIG_ISO ]; then
    echo "No source ISO"
    exit 1
fi

if lsb_release -c | grep bionic ;then
    BUILD_IN_BIONIC=true
else
    echo "Unsupport build environment"
    exit 1    
fi

build_recovery_tool() {
    git clone --depth 1 https://github.com/woodrow-shen/ubuntu-server-recovery.git -b intel-nuc $UBUNTURECOVERY
    cd $UBUNTURECOVERY

    export GOPATH=$WORKDIR/gocode
    export PATH="$PATH:$GOPATH/bin"
    go get launchpad.net/godeps 
    godeps -t -u dependencies.tsv || true

    mkdir $WORKDIR/gocode/src/github.com/Lyoncore/
    ln -s $UBUNTURECOVERY $WORKDIR/gocode/src/github.com/Lyoncore/ubuntu-custom-recovery
    go run build.go build
}

build_recovery_image() {
    IMAGE=${IMG_NAME}.img

    mkdir $OUTDIR || true
    cd $TOP_DIR

    # make it as image
    fallocate -l 1G $IMAGE
    parted -ms -a optimal $IMAGE unit MiB mklabel gpt mkpart primary  fat32 4 1020 name 1 INSTALLER print
    parted -ms $IMAGE set 1 boot on
    LOOP_IMG=$(sudo losetup --find --show $IMAGE | xargs basename)
    sudo kpartx -avs /dev/$LOOP_IMG
    sudo mkfs.vfat -F 32 -n INSTALLER /dev/mapper/${LOOP_IMG}p1
    sudo fatlabel /dev/mapper/${LOOP_IMG}p1 INSTALLER
    MNT=$OUTDIR/mnt
    mkdir $MNT
    sudo mount /dev/mapper/${LOOP_IMG}p1 $MNT

    ISOMNT=$OUTDIR/isomnt
    mkdir $ISOMNT
    if [ ! -f /usr/bin/fuseiso ];then
        sudo apt update
        sudo apt install -y fuseiso
    fi
    sudo fuseiso $ORIG_ISO $ISOMNT

    sudo rsync -aHK $ISOMNT/ $MNT || true

    # hack ubuntu iso
    hack_ubuntu_iso

    # update installer uuid in grub
    INSTALLER_UUID=$(sudo blkid -s UUID -o value /dev/mapper/${LOOP_IMG}p1)
    sudo sed -i "s/###INSTALLER_UUID###/$INSTALLER_UUID/g" $MNT/boot/grub/grub.cfg

    sudo umount $ISOMNT
    sudo umount $MNT
    sudo kpartx -ds /dev/$LOOP_IMG
    sudo losetup -d /dev/$LOOP_IMG
    mv $IMAGE $OUTDIR/$IMAGE
    rmdir $ISOMNT
    rmdir $MNT

    pxz $OUTDIR/$IMAGE
    sha256sum $OUTDIR/$IMAGE".xz" > $OUTDIR/$IMAGE".xz.sha256sum"

    echo "[Output image: $OUTDIR/$IMAGE".xz"]"
}

hack_ubuntu_iso() {
    # hack iso to make recovery work
    cd $UBUNTURECOVERY/recovery-assets/factory/debs
    apt download efibootmgr libefiboot1 libefivar1 \
        binutils binutils-common binutils-x86-64-linux-gnu build-essential cpp cpp-7 \
	dkms dpkg-dev fakeroot g++ g++-7 gcc gcc-7 gcc-7-base libalgorithm-diff-perl \
	libalgorithm-diff-xs-perl libalgorithm-merge-perl libasan4 libatomic1 \
	libbinutils libc-dev-bin libc6-dev libcc1-0 libcilkrts5 libdpkg-perl \
	libfakeroot libfile-fcntllock-perl libgcc-7-dev libgomp1 libisl19 libitm1 \
	liblsan0 libmpc3 libmpx2 libquadmath0 libstdc++-7-dev libtsan0 libubsan0 \
	linux-libc-dev make manpages-dev
    cd -
    sudo cp -r $UBUNTURECOVERY/cdrom-includes/recovery/ $MNT/
    sudo cp $UBUNTURECOVERY/recovery-includes/recovery/bin/recovery.bin $MNT/recovery/bin/
    sudo cp -r $UBUNTURECOVERY/recovery-assets/* $MNT/recovery
    sudo cp -r $UBUNTURECOVERY/grub-includes/boot/* $MNT/boot/

    # repack initramfs by adding initramfs-hook
    sudo mkdir $WORKDIR/initrd-tmp
    dd if=$MNT/casper/initrd of=$WORKDIR/initrd.img bs=512 skip=48
    cd $WORKDIR/initrd-tmp
    zcat $WORKDIR/initrd.img | sudo cpio -id
    sudo cp $UBUNTURECOVERY/initrd-casper-hooks/scripts/casper-bottom/* scripts/casper-bottom/
    sudo bash -c 'cat >> scripts/casper-bottom/ORDER << EOF
/scripts/casper-bottom/99ubuntu_custom-recovery "\$@"
[ -e /conf/param.conf ] && . /conf/param.conf
EOF'
    find . | sudo cpio -H newc -o | gzip -9 > $WORKDIR/initrd.gz
    sudo cp $WORKDIR/initrd.gz $MNT/casper
    sudo rm -rf $WORKDIR/initrd.gz $WORKDIR/initrd-tmp
    cd -
}

cleanup() {
    if [ $? = 0 ]; then
        echo "[Complete]"
        rm -rf $WORKDIR
    else
        echo "[Cleanup]"
        sudo umount $ISOMNT
        sudo umount $MNT
        sudo kpartx -ds /dev/$LOOP_IMG
        sudo losetup -d /dev/$LOOP_IMG
        sudo rm -rf $ISOMNT $MNT $WORKDIR
        sudo rm -rf $TOP_DIR/initrd-tmp $TOP_DIR/*.img
    fi
}

trap cleanup 1 2 3 6 EXIT

build_recovery_tool
build_recovery_image
